
aws/modules/waf/main.tf (terraform)
===================================
Tests: 3 (SUCCESSES: 0, FAILURES: 3)
Failures: 3 (MEDIUM: 1, HIGH: 2, CRITICAL: 0)

AVD-AWS-0088 (HIGH): Bucket does not have encryption enabled
═══════════════════════════════════════════════════════════════════════════════════════════════════════════════
S3 Buckets should be encrypted to protect the data that is stored within them if access is compromised.


See https://avd.aquasec.com/misconfig/avd-aws-0088
───────────────────────────────────────────────────────────────────────────────────────────────────────────────
 aws/modules/waf/main.tf:329-332
   via aws/main.tf:226-236 (module.waf[0])
───────────────────────────────────────────────────────────────────────────────────────────────────────────────
 329 ┌ resource "aws_s3_bucket" "waf_logs" {
 330 │   bucket = "aws-waf-logs-${local.name}"
 331 │   tags   = var.tags
 332 └ }
───────────────────────────────────────────────────────────────────────────────────────────────────────────────


AVD-AWS-0090 (MEDIUM): Bucket does not have versioning enabled
═══════════════════════════════════════════════════════════════════════════════════════════════════════════════
Versioning in Amazon S3 is a means of keeping multiple variants of an object in the same bucket.

You can use the S3 Versioning feature to preserve, retrieve, and restore every version of every object stored in your buckets.

With versioning you can recover more easily from both unintended user actions and application failures.


See https://avd.aquasec.com/misconfig/avd-aws-0090
───────────────────────────────────────────────────────────────────────────────────────────────────────────────
 aws/modules/waf/main.tf:329-332
   via aws/main.tf:226-236 (module.waf[0])
───────────────────────────────────────────────────────────────────────────────────────────────────────────────
 329 ┌ resource "aws_s3_bucket" "waf_logs" {
 330 │   bucket = "aws-waf-logs-${local.name}"
 331 │   tags   = var.tags
 332 └ }
───────────────────────────────────────────────────────────────────────────────────────────────────────────────


AVD-AWS-0132 (HIGH): Bucket does not encrypt data with a customer managed key.
═══════════════════════════════════════════════════════════════════════════════════════════════════════════════
Encryption using AWS keys provides protection for your S3 buckets. To increase control of the encryption and manage factors like rotation use customer managed keys.


See https://avd.aquasec.com/misconfig/avd-aws-0132
───────────────────────────────────────────────────────────────────────────────────────────────────────────────
 aws/modules/waf/main.tf:329-332
   via aws/main.tf:226-236 (module.waf[0])
───────────────────────────────────────────────────────────────────────────────────────────────────────────────
 329 ┌ resource "aws_s3_bucket" "waf_logs" {
 330 │   bucket = "aws-waf-logs-${local.name}"
 331 │   tags   = var.tags
 332 └ }
───────────────────────────────────────────────────────────────────────────────────────────────────────────────



commons/aws/cloudwatch-alerts/main.tf (terraform)
=================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1)
Failures: 1 (MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-AWS-0095 (HIGH): Topic does not have encryption enabled.
═══════════════════════════════════════════════════════════════════════════════════════════════════════════════
Topics should be encrypted to protect their contents.


See https://avd.aquasec.com/misconfig/avd-aws-0095
───────────────────────────────────────────────────────────────────────────────────────────────────────────────
 commons/aws/cloudwatch-alerts/main.tf:98-103
   via fx-admin/main.tf:562-572 (module.cloudwatch_alerts)
───────────────────────────────────────────────────────────────────────────────────────────────────────────────
  98 ┌ resource "aws_sns_topic" "production_alerts" {
  99 │   name                              = "${var.environment}-production-alerts-${var.region}"
 100 │   http_failure_feedback_role_arn    = aws_iam_role.FailureFeedbackRole.arn
 101 │   http_success_feedback_role_arn    = aws_iam_role.SuccessFeedbackRole.arn
 102 │   http_success_feedback_sample_rate = "100"
 103 └ }
───────────────────────────────────────────────────────────────────────────────────────────────────────────────



commons/aws/rabbitmq/main.tf (terraform)
========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1)
Failures: 1 (MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-AWS-0070 (MEDIUM): Broker does not have audit logging enabled.
═══════════════════════════════════════════════════════════════════════════════════════════════════════════════
Logging should be enabled to allow tracing of issues and activity to be investigated more fully. Logs provide additional information and context which is often invalauble during investigation


See https://avd.aquasec.com/misconfig/avd-aws-0070
───────────────────────────────────────────────────────────────────────────────────────────────────────────────
 commons/aws/rabbitmq/main.tf:106-108
   via commons/aws/rabbitmq/main.tf:86-116 (aws_mq_broker.rabbitmq)
    via fx-admin/main.tf:123-141 (module.rabbitmq)
───────────────────────────────────────────────────────────────────────────────────────────────────────────────
  86   resource "aws_mq_broker" "rabbitmq" {
  ..   
 106 ┌   logs {
 107 │     general = true
 108 └   }
 ...   
 116   }
───────────────────────────────────────────────────────────────────────────────────────────────────────────────



external/vpc/main.tf (terraform)
================================
Tests: 4 (SUCCESSES: 0, FAILURES: 4)
Failures: 4 (MEDIUM: 4, HIGH: 0, CRITICAL: 0)

AVD-AWS-0105 (MEDIUM): Network ACL rule allows ingress from public internet.
═══════════════════════════════════════════════════════════════════════════════════════════════════════════════
The Network Access Control List (NACL) function provide stateless filtering of ingress and
egress network traffic to AWS resources. It is recommended that no NACL allows
unrestricted ingress access to remote server administration ports, such as SSH to port 22
and RDP to port 3389.


See https://avd.aquasec.com/misconfig/aws-vpc-no-public-ingress-acl
───────────────────────────────────────────────────────────────────────────────────────────────────────────────
 external/vpc/main.tf:315
   via external/vpc/main.tf:301-316 (aws_network_acl_rule.private_inbound[11])
    via aws/modules/vpc/main.tf:26-89 (module.vpc)
     via aws/main.tf:57-73 (module.vpc)
───────────────────────────────────────────────────────────────────────────────────────────────────────────────
 301   resource "aws_network_acl_rule" "private_inbound" {
 ...   
 315 [   ipv6_cidr_block = lookup(var.private_inbound_acl_rules[count.index], "ipv6_cidr_block", null)
 316   }
───────────────────────────────────────────────────────────────────────────────────────────────────────────────


AVD-AWS-0105 (MEDIUM): Network ACL rule allows ingress from public internet.
═══════════════════════════════════════════════════════════════════════════════════════════════════════════════
The Network Access Control List (NACL) function provide stateless filtering of ingress and
egress network traffic to AWS resources. It is recommended that no NACL allows
unrestricted ingress access to remote server administration ports, such as SSH to port 22
and RDP to port 3389.


See https://avd.aquasec.com/misconfig/aws-vpc-no-public-ingress-acl
───────────────────────────────────────────────────────────────────────────────────────────────────────────────
 external/vpc/main.tf:314
   via external/vpc/main.tf:301-316 (aws_network_acl_rule.private_inbound[10])
    via aws/modules/vpc/main.tf:26-89 (module.vpc)
     via aws/main.tf:57-73 (module.vpc)
───────────────────────────────────────────────────────────────────────────────────────────────────────────────
 301   resource "aws_network_acl_rule" "private_inbound" {
 ...   
 314 [   cidr_block      = lookup(var.private_inbound_acl_rules[count.index], "cidr_block", null)
 ...   
 316   }
───────────────────────────────────────────────────────────────────────────────────────────────────────────────


AVD-AWS-0105 (MEDIUM): Network ACL rule allows ingress from public internet.
═══════════════════════════════════════════════════════════════════════════════════════════════════════════════
The Network Access Control List (NACL) function provide stateless filtering of ingress and
egress network traffic to AWS resources. It is recommended that no NACL allows
unrestricted ingress access to remote server administration ports, such as SSH to port 22
and RDP to port 3389.


See https://avd.aquasec.com/misconfig/aws-vpc-no-public-ingress-acl
───────────────────────────────────────────────────────────────────────────────────────────────────────────────
 external/vpc/main.tf:196
   via external/vpc/main.tf:182-197 (aws_network_acl_rule.public_inbound[11])
    via aws/modules/vpc/main.tf:26-89 (module.vpc)
     via aws/main.tf:57-73 (module.vpc)
───────────────────────────────────────────────────────────────────────────────────────────────────────────────
 182   resource "aws_network_acl_rule" "public_inbound" {
 ...   
 196 [   ipv6_cidr_block = lookup(var.public_inbound_acl_rules[count.index], "ipv6_cidr_block", null)
 197   }
───────────────────────────────────────────────────────────────────────────────────────────────────────────────


AVD-AWS-0105 (MEDIUM): Network ACL rule allows ingress from public internet.
═══════════════════════════════════════════════════════════════════════════════════════════════════════════════
The Network Access Control List (NACL) function provide stateless filtering of ingress and
egress network traffic to AWS resources. It is recommended that no NACL allows
unrestricted ingress access to remote server administration ports, such as SSH to port 22
and RDP to port 3389.


See https://avd.aquasec.com/misconfig/aws-vpc-no-public-ingress-acl
───────────────────────────────────────────────────────────────────────────────────────────────────────────────
 external/vpc/main.tf:195
   via external/vpc/main.tf:182-197 (aws_network_acl_rule.public_inbound[10])
    via aws/modules/vpc/main.tf:26-89 (module.vpc)
     via aws/main.tf:57-73 (module.vpc)
───────────────────────────────────────────────────────────────────────────────────────────────────────────────
 182   resource "aws_network_acl_rule" "public_inbound" {
 ...   
 195 [   cidr_block      = lookup(var.public_inbound_acl_rules[count.index], "cidr_block", null)
 ...   
 197   }
───────────────────────────────────────────────────────────────────────────────────────────────────────────────



fx-admin/modules/rabbitmq_nlb/main.tf (terraform)
=================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1)
Failures: 1 (MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-AWS-0053 (HIGH): Load balancer is exposed publicly.
═══════════════════════════════════════════════════════════════════════════════════════════════════════════════
There are many scenarios in which you would want to expose a load balancer to the wider internet, but this check exists as a warning to prevent accidental exposure of internal assets. You should ensure that this resource should be exposed publicly.


See https://avd.aquasec.com/misconfig/avd-aws-0053
───────────────────────────────────────────────────────────────────────────────────────────────────────────────
 fx-admin/modules/rabbitmq_nlb/main.tf:140
   via fx-admin/modules/rabbitmq_nlb/main.tf:138-146 (aws_lb.network_load_balancer)
    via fx-admin/main.tf:143-157 (module.rabbitmq_nlb)
───────────────────────────────────────────────────────────────────────────────────────────────────────────────
 138   resource "aws_lb" "network_load_balancer" {
 139     name               = "${var.name}-rabbitmq-nlb"
 140 [   internal           = false
 141     load_balancer_type = "network"
 142     subnets            = var.subnet_ids
 143     security_groups    = [aws_security_group.nlb.id]
 144   
 145     tags = var.tags
 146   }
───────────────────────────────────────────────────────────────────────────────────────────────────────────────



kubernetes/modules/logging/modules/curator/configs/cronjob.yaml (kubernetes)
============================================================================
Tests: 37 (SUCCESSES: 35, FAILURES: 2)
Failures: 2 (MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0012 (MEDIUM): Container 'curator' of CronJob 'curator' should set 'securityContext.runAsNonRoot' to true
═══════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
───────────────────────────────────────────────────────────────────────────────────────────────────────────────
 kubernetes/modules/logging/modules/curator/configs/cronjob.yaml:14-22
───────────────────────────────────────────────────────────────────────────────────────────────────────────────
  14 ┌             - name: curator
  15 │               image: ${docker_image}:${tag}
  16 │               volumeMounts:
  17 │                 - name: config-volume
  18 │                   mountPath: /etc/curator/
  19 │               securityContext:
  20 │                 allowPrivilegeEscalation: false
  21 │                 seccompProfile:
  22 └                   type: RuntimeDefault
───────────────────────────────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'curator' of CronJob 'curator' should set 'securityContext.readOnlyRootFilesystem' to true
═══════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
───────────────────────────────────────────────────────────────────────────────────────────────────────────────
 kubernetes/modules/logging/modules/curator/configs/cronjob.yaml:14-22
───────────────────────────────────────────────────────────────────────────────────────────────────────────────
  14 ┌             - name: curator
  15 │               image: ${docker_image}:${tag}
  16 │               volumeMounts:
  17 │                 - name: config-volume
  18 │                   mountPath: /etc/curator/
  19 │               securityContext:
  20 │                 allowPrivilegeEscalation: false
  21 │                 seccompProfile:
  22 └                   type: RuntimeDefault
───────────────────────────────────────────────────────────────────────────────────────────────────────────────



kubernetes/modules/logging/modules/curator/configs/curator-config.yaml (kubernetes)
===================================================================================
Tests: 37 (SUCCESSES: 35, FAILURES: 2)
Failures: 2 (MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'curator-config' in 'logging' namespace stores sensitive contents in key(s) or value(s) '{"  username"}'
═══════════════════════════════════════════════════════════════════════════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
───────────────────────────────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'curator-config' in 'logging' namespace stores secrets in key(s) or value(s) '{"  password"}'
═══════════════════════════════════════════════════════════════════════════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
───────────────────────────────────────────────────────────────────────────────────────────────────────────────



rollback/modules/rds-crr/main.tf (terraform)
============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1)
Failures: 1 (MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-AWS-0343 (MEDIUM): Cluster does not have Deletion Protection enabled
═══════════════════════════════════════════════════════════════════════════════════════════════════════════════
Ensure deletion protection is enabled for RDS clusters.

See https://avd.aquasec.com/misconfig/avd-aws-0343
───────────────────────────────────────────────────────────────────────────────────────────────────────────────
 rollback/modules/rds-crr/main.tf:28
   via rollback/modules/rds-crr/main.tf:17-36 (aws_rds_cluster.dr)
───────────────────────────────────────────────────────────────────────────────────────────────────────────────
  17   resource "aws_rds_cluster" "dr" {
  ..   
  28 [   deletion_protection             = var.deletion_protection
  ..   
  36   }
───────────────────────────────────────────────────────────────────────────────────────────────────────────────


